{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport class GPGPUContext {\n  constructor(gl) {\n    this.outputTexture = null;\n    this.program = null;\n    this.disposed = false;\n    this.vertexAttrsAreBound = false;\n    this.itemsToPoll = [];\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension = this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n      this.textureFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support half float textures, yet the ' + 'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support color renderable half floats, yet ' + 'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n    this.textureConfig = tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n  get debug() {\n    return env().getBool('DEBUG');\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' + ' This is probably a resource leak, delete the program with ' + 'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn('Disposing a GPGPUContext that still has a bound output matrix ' + 'texture.  This is probably a resource leak, delete the output ' + 'matrix texture with GPGPUContext.deleteMatrixTexture before ' + 'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n  createFloat32MatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createFloat16MatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createUnsignedBytesMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  uploadPixelDataToTexture(texture, pixels) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n  uploadDenseMatrixToTexture(texture, width, height, data) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n  }\n  createFloat16PackedMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createPackedMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  deleteMatrixTexture(texture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n  downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n  }\n  downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n  }\n  downloadFloat32MatrixFromBuffer(buffer, size) {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n  createBufferFromTexture(texture, rows, columns) {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n  createAndWaitForFence() {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n  createFence(gl) {\n    let query;\n    let isFencePassed;\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl;\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n      query = sync;\n    } else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n    return {\n      query,\n      isFencePassed\n    };\n  }\n  downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n  }\n  createProgram(fragmentShader) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n  deleteProgram(program) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n  setProgram(program) {\n    this.throwIfDisposed();\n    this.program = program;\n    if (this.program != null && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n  getUniformLocation(program, uniformName) {\n    let shouldThrow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n    }\n  }\n  getAttributeLocation(program, attribute) {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n  getUniformLocationNoThrow(program, uniformName) {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n  setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n  setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n  setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n    this.throwIfDisposed();\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n  setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n    this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n  }\n  setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n  debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n  executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n  blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n  getQueryTimerExtension() {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension = webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ? 'EXT_disjoint_timer_query_webgl2' : 'EXT_disjoint_timer_query');\n    }\n    return this.disjointQueryTimerExtension;\n  }\n  getQueryTimerExtensionWebGL2() {\n    return this.getQueryTimerExtension();\n  }\n  getQueryTimerExtensionWebGL1() {\n    return this.getQueryTimerExtension();\n  }\n  beginQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT();\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n  async waitForQueryAndGetTime(query) {\n    await util.repeatedTry(() => this.disposed ||\n    // while testing contexts are created / disposed\n    // in rapid succession, so without this check we\n    // may poll for the query timer indefinitely\n    this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n  getQueryTime(query, queryTimerVersion) {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl;\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n      const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n  isQueryAvailable(query, queryTimerVersion) {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n      const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n      return available && !this.disjoint;\n    }\n  }\n  pollFence(fenceContext) {\n    return new Promise(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n  pollItems() {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {\n        resolveFn\n      } = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n  addItemToPoll(isDoneFn, resolveFn) {\n    this.itemsToPoll.push({\n      isDoneFn,\n      resolveFn\n    });\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    let scheduleFn = undefined;\n    if ('setTimeoutCustom' in env().platform) {\n      scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n    }\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    }, () => 0, null, scheduleFn);\n  }\n  bindTextureToFrameBuffer(texture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n  unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n  downloadMatrixDriver(texture, downloadAndDecode) {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n  setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n  setOutputMatrixWriteRegionDriver(x, y, width, height) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n  throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n  throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr) {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}","map":{"version":3,"mappings":"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","names":["env","util","getWebGLContext","setWebGLContext","gpgpu_util","tex_util","webgl_util","GPGPUContext","constructor","gl","glVersion","getNumber","COLOR_BUFFER_FLOAT","COLOR_BUFFER_HALF_FLOAT","parallelCompilationExtension","getExtension","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","getExtensionOrThrow","hasExtension","textureHalfFloatExtension","get","Error","colorBufferFloatExtension","colorBufferHalfFloatExtension","vertexBuffer","createVertexBuffer","indexBuffer","createIndexBuffer","framebuffer","createFramebuffer","textureConfig","getTextureConfig","debug","getBool","dispose","disposed","program","console","warn","outputTexture","callAndCheck","finish","bindFramebuffer","FRAMEBUFFER","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","deleteBuffer","createFloat32MatrixTexture","rows","columns","throwIfDisposed","createFloat16MatrixTexture","createUnsignedBytesMatrixTexture","uploadPixelDataToTexture","texture","pixels","uploadDenseMatrixToTexture","width","height","data","createFloat16PackedMatrixTexture","createPackedMatrixTexture","deleteMatrixTexture","unbindColorTextureFromFramebuffer","deleteTexture","downloadByteEncodedFloatMatrixFromOutputTexture","downloadMatrixDriver","downloadPackedMatrixFromBuffer","buffer","batch","physicalRows","physicalCols","downloadFloat32MatrixFromBuffer","size","createBufferFromTexture","bindTextureToFrameBuffer","result","createBufferFromOutputTexture","unbindTextureToFrameBuffer","createAndWaitForFence","fenceContext","createFence","pollFence","query","isFencePassed","gl2","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","downloadMatrixFromPackedTexture","downloadMatrixFromPackedOutputTexture","createProgram","fragmentShader","vertexShader","createVertexShader","attachShader","linkProgram","validateProgram","vertexAttrsAreBound","setProgram","bindVertexProgramAttributeStreams","deleteProgram","useProgram","getUniformLocation","uniformName","shouldThrow","getProgramUniformLocationOrThrow","getProgramUniformLocation","getAttributeLocation","attribute","getAttribLocation","getUniformLocationNoThrow","setInputMatrixTexture","inputMatrixTexture","uniformLocation","textureUnit","throwIfNoProgram","bindTextureToProgramUniformSampler","setOutputMatrixTexture","outputMatrixTexture","setOutputMatrixTextureDriver","setOutputPackedMatrixTexture","outputPackedMatrixTexture","getPackedMatrixTextureShapeWidthHeight","setOutputMatrixWriteRegion","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","setOutputPackedMatrixWriteRegion","debugValidate","validateFramebuffer","executeProgram","drawElements","TRIANGLES","UNSIGNED_SHORT","blockUntilAllProgramsCompleted","getQueryTimerExtension","disjointQueryTimerExtension","getQueryTimerExtensionWebGL2","getQueryTimerExtensionWebGL1","ext","createQuery","TIME_ELAPSED_EXT","createQueryEXT","beginQueryEXT","endQueryEXT","waitForQueryAndGetTime","repeatedTry","getQueryTime","queryTimerVersion","timeElapsedNanos","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","getParameter","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","pollItems","index","linearSearchLastTrue","itemsToPoll","map","x","isDoneFn","i","resolveFn","slice","push","length","scheduleFn","undefined","platform","setTimeoutCustom","bind","bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","viewport","scissor","y","arr","isDone"],"sources":["C:\\Users\\vivek\\OneDrive\\Desktop\\College\\z#5_Internships\\IISC\\tfjs-backend-webgl\\src\\gpgpu_context.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension, WebGLParallelCompilationExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  parallelCompilationExtension: WebGLParallelCompilationExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension =\n        this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShader: WebGLShader): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    let scheduleFn = undefined;\n    if ('setTimeoutCustom' in env().platform) {\n      scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n    }\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    }, () => 0, null, scheduleFn);\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n"]},"metadata":{},"sourceType":"module"}
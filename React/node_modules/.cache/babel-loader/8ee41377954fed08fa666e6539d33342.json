{"ast":null,"code":"import { getCoordsDataType } from './shader_compiler';\nexport var CumOpType;\n(function (CumOpType) {\n  CumOpType[\"Prod\"] = \"*\";\n  CumOpType[\"Sum\"] = \"+\";\n})(CumOpType || (CumOpType = {}));\nexport class CumProgram {\n  constructor(op, outputShape, exclusive, reverse) {\n    this.op = op;\n    this.outputShape = outputShape;\n    this.variableNames = ['x'];\n    this.customUniforms = [{\n      name: 'index',\n      type: 'float'\n    }];\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val = exclusive ? initVal : `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = reverse ? 'end + pow2' : 'end - pow2';\n    }\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords', this.op)};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords', this.op)} = idx;\n          val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\nfunction getCoords(rank, name, op) {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\nfunction getFinalCoord(rank, name, op) {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}","map":{"version":3,"mappings":"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","names":["getCoordsDataType","CumOpType","CumProgram","constructor","op","outputShape","exclusive","reverse","name","type","rank","length","initVal","Prod","val","getCoords","condition","idxString","userCode","getFinalCoord","Error"],"sources":["C:\\Users\\vivek\\OneDrive\\Desktop\\College\\z#5_Internships\\IISC\\tfjs-backend-webgl\\src\\cum_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport enum CumOpType {\n  Prod = '*',\n  Sum = '+',\n}\n\nexport class CumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  userCode: string;\n  customUniforms = [{name: 'index', type: 'float' as UniformType}];\n\n  constructor(\n      public op: CumOpType, public outputShape: number[], exclusive: boolean,\n      reverse: boolean) {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val =\n        exclusive ? initVal : `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords', this.op)};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords', this.op)} = idx;\n          val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
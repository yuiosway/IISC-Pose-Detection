{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ArgMinMaxPackedProgram {\n  constructor(shape, windowSize, op, firstPass) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() + op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n    const compOp = op === 'max' ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}","map":{"version":3,"mappings":"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","names":["util","getChannels","getCoordsDataType","ArgMinMaxPackedProgram","constructor","shape","windowSize","op","firstPass","assert","length","charAt","toUpperCase","slice","inSize","outSize","Math","ceil","outputShape","push","variableNames","outShape","rank","dtype","coords","sourceLocSetup","sourceRank","sourceLocDType","join","channels","inChannel","intChannels","map","x","srcRCoords","concat","srcGCoords","srcBCoords","srcACoords","compOp","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","userCode"],"sources":["C:\\Users\\vivek\\OneDrive\\Desktop\\College\\z#5_Internships\\IISC\\tfjs-backend-webgl\\src\\argminmax_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
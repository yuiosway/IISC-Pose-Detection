{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Cumsum } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the cumulative sum of a `tf.Tensor` along `axis`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4]);\n * x.cumsum().print();\n * ```\n * ```js\n * const x = tf.tensor([[1, 2], [3, 4]]);\n * x.cumsum().print();\n * ```\n *\n * @param x The input tensor to be summed.\n * @param axis The axis along which to sum. Optional. Defaults to 0.\n * @param exclusive Whether to perform exclusive cumulative sum. Optional.\n *     Defaults to false. If set to true then the sum of each tensor entry\n *     does not include its own value, but only the values previous to it\n *     along the specified axis.\n * @param reverse Whether to sum in the opposite direction. Optional.\n *     Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Scan'}\n */\nfunction cumsum_(x) {\n  let axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let exclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let reverse = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const $x = convertToTensor(x, 'x', 'cumsum');\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    axis,\n    exclusive,\n    reverse\n  };\n  return ENGINE.runKernel(Cumsum, inputs, attrs);\n}\nexport const cumsum = op({\n  cumsum_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,MAAM,QAAkC,iBAAiB;AAIjE,SAAQC,eAAe,QAAO,oBAAoB;AAGlD,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASC,OAAO,CACZC,CAAoB,EAA8C;EAAA,IAA5CC,IAAI,uEAAG,CAAC;EAAA,IAAEC,SAAS,uEAAG,KAAK;EAAA,IAAEC,OAAO,uEAAG,KAAK;EACpE,MAAMC,EAAE,GAAGP,eAAe,CAACG,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC;EAE5C,MAAMK,MAAM,GAAiB;IAACL,CAAC,EAAEI;EAAE,CAAC;EACpC,MAAME,KAAK,GAAgB;IAACL,IAAI;IAAEC,SAAS;IAAEC;EAAO,CAAC;EAErD,OAAOR,MAAM,CAACY,SAAS,CACnBX,MAAM,EAAES,MAA8B,EAAEC,KAA2B,CAAC;AAC1E;AAEA,OAAO,MAAME,MAAM,GAAGV,EAAE,CAAC;EAACC;AAAO,CAAC,CAAC","names":["ENGINE","Cumsum","convertToTensor","op","cumsum_","x","axis","exclusive","reverse","$x","inputs","attrs","runKernel","cumsum"],"sources":["C:\\Users\\vivek\\OneDrive\\Desktop\\College\\z#5_Internships\\IISC\\tfjs-core\\src\\ops\\cumsum.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Cumsum, CumsumAttrs, CumsumInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the cumulative sum of a `tf.Tensor` along `axis`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4]);\n * x.cumsum().print();\n * ```\n * ```js\n * const x = tf.tensor([[1, 2], [3, 4]]);\n * x.cumsum().print();\n * ```\n *\n * @param x The input tensor to be summed.\n * @param axis The axis along which to sum. Optional. Defaults to 0.\n * @param exclusive Whether to perform exclusive cumulative sum. Optional.\n *     Defaults to false. If set to true then the sum of each tensor entry\n *     does not include its own value, but only the values previous to it\n *     along the specified axis.\n * @param reverse Whether to sum in the opposite direction. Optional.\n *     Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Scan'}\n */\nfunction cumsum_<T extends Tensor>(\n    x: Tensor|TensorLike, axis = 0, exclusive = false, reverse = false): T {\n  const $x = convertToTensor(x, 'x', 'cumsum');\n\n  const inputs: CumsumInputs = {x: $x};\n  const attrs: CumsumAttrs = {axis, exclusive, reverse};\n\n  return ENGINE.runKernel(\n      Cumsum, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const cumsum = op({cumsum_});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getTensor } from '../executors/utils';\nimport { getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam } from '../operation_mapper';\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl {\n  constructor(node, tensorMap, context) {\n    this.node = node;\n    this.tensorMap = tensorMap;\n    this.context = context;\n    this.inputs = [];\n    this.attrs = {};\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs).reduce((attrs, key) => {\n        attrs[key] = this.getAttr(key);\n        return attrs;\n      }, {});\n    }\n  }\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  getInput(name) {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  getAttr(name, defaultValue) {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n    }\n    return defaultValue;\n  }\n}","map":{"version":3,"mappings":"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","names":["getTensor","getBoolArrayParam","getBoolParam","getDtypeArrayParam","getDtypeParam","getNumberParam","getNumericArrayParam","getStringArrayParam","getStringParam","getTensorShapeArrayParam","getTensorShapeParam","NodeValueImpl","constructor","node","tensorMap","context","inputs","inputNames","map","name","getInput","rawAttrs","attrs","Object","keys","reduce","key","getAttr","defaultValue","value","tensor","i","f","s","b","shape","type","list"],"sources":["C:\\Users\\vivek\\OneDrive\\Desktop\\College\\z#5_Internships\\IISC\\tfjs-converter\\src\\operations\\custom_op\\node_value_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isPromise } from './util_base';\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n  // tslint:disable-next-line: no-any\n  constructor(global) {\n    this.global = global;\n    this.flags = {};\n    this.flagRegistry = {};\n    this.urlFlags = {};\n    // Jasmine spies on this in 'environment_test.ts'\n    this.getQueryParams = getQueryParams;\n    this.populateURLFlags();\n  }\n  setPlatform(platformName, platform) {\n    if (this.platform != null) {\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(`Platform ${this.platformName} has already been set. ` + `Overwriting the platform with ${platformName}.`);\n      }\n    }\n    this.platformName = platformName;\n    this.platform = platform;\n  }\n  registerFlag(flagName, evaluationFn, setHook) {\n    this.flagRegistry[flagName] = {\n      evaluationFn,\n      setHook\n    };\n    // Override the flag value from the URL. This has to happen here because\n    // the environment is initialized before flags get registered.\n    if (this.urlFlags[flagName] != null) {\n      const flagValue = this.urlFlags[flagName];\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);\n      }\n      this.set(flagName, flagValue);\n    }\n  }\n  async getAsync(flagName) {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n    this.flags[flagName] = await this.evaluateFlag(flagName);\n    return this.flags[flagName];\n  }\n  get(flagName) {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n    const flagValue = this.evaluateFlag(flagName);\n    if (isPromise(flagValue)) {\n      throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` + `Please use getAsync() instead.`);\n    }\n    this.flags[flagName] = flagValue;\n    return this.flags[flagName];\n  }\n  getNumber(flagName) {\n    return this.get(flagName);\n  }\n  getBool(flagName) {\n    return this.get(flagName);\n  }\n  getFlags() {\n    return this.flags;\n  }\n  // For backwards compatibility.\n  get features() {\n    return this.flags;\n  }\n  set(flagName, value) {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);\n    }\n    this.flags[flagName] = value;\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  }\n  evaluateFlag(flagName) {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);\n    }\n    return this.flagRegistry[flagName].evaluationFn();\n  }\n  setFlags(flags) {\n    this.flags = Object.assign({}, flags);\n  }\n  reset() {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n  populateURLFlags() {\n    if (typeof this.global === 'undefined' || typeof this.global.location === 'undefined' || typeof this.global.location.search === 'undefined') {\n      return;\n    }\n    const urlParams = this.getQueryParams(this.global.location.search);\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n      keyValues.forEach(keyValue => {\n        const [key, value] = keyValue.split(':');\n        this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  }\n}\nexport function getQueryParams(queryString) {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function (s) {\n    for (var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      t[_key - 1] = arguments[_key];\n    }\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\nfunction decodeParam(params, name, value) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\nfunction parseValue(flagName, value) {\n  value = value.toLowerCase();\n  if (value === 'true' || value === 'false') {\n    return value === 'true';\n  } else if (`${+value}` === value) {\n    return +value;\n  }\n  throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);\n}\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n  return ENV;\n}\nexport let ENV = null;\nexport function setEnvironmentGlobal(environment) {\n  ENV = environment;\n}","map":{"version":3,"mappings":"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","names":["isPromise","TENSORFLOWJS_FLAGS_PREFIX","Environment","constructor","global","getQueryParams","populateURLFlags","setPlatform","platformName","platform","env","getBool","console","warn","registerFlag","flagName","evaluationFn","setHook","flagRegistry","urlFlags","flagValue","set","getAsync","flags","evaluateFlag","get","Error","getNumber","getFlags","features","value","setFlags","Object","assign","reset","location","search","urlParams","keyValues","split","forEach","keyValue","key","parseValue","queryString","params","replace","s","t","decodeParam","join","name","decodeURIComponent","toLowerCase","ENV","setEnvironmentGlobal","environment"],"sources":["C:\\Users\\vivek\\OneDrive\\Desktop\\College\\z#5_Internships\\IISC\\tfjs-core\\src\\environment.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Platform} from './platforms/platform';\nimport {isPromise} from './util_base';\n\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n\ntype FlagValue = number|boolean;\ntype FlagEvaluationFn = (() => FlagValue)|(() => Promise<FlagValue>);\nexport type Flags = {\n  [featureName: string]: FlagValue\n};\nexport type FlagRegistryEntry = {\n  evaluationFn: FlagEvaluationFn;\n  setHook?: (value: FlagValue) => void;\n};\n\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n  private flags: Flags = {};\n  private flagRegistry: {[flagName: string]: FlagRegistryEntry} = {};\n\n  private urlFlags: Flags = {};\n\n  platformName: string;\n  platform: Platform;\n\n  // Jasmine spies on this in 'environment_test.ts'\n  getQueryParams = getQueryParams;\n\n  // tslint:disable-next-line: no-any\n  constructor(public global: any) {\n    this.populateURLFlags();\n  }\n\n  setPlatform(platformName: string, platform: Platform) {\n    if (this.platform != null) {\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(\n            `Platform ${this.platformName} has already been set. ` +\n            `Overwriting the platform with ${platformName}.`);\n      }\n    }\n    this.platformName = platformName;\n    this.platform = platform;\n  }\n\n  registerFlag(\n      flagName: string, evaluationFn: FlagEvaluationFn,\n      setHook?: (value: FlagValue) => void) {\n    this.flagRegistry[flagName] = {evaluationFn, setHook};\n\n    // Override the flag value from the URL. This has to happen here because\n    // the environment is initialized before flags get registered.\n    if (this.urlFlags[flagName] != null) {\n      const flagValue = this.urlFlags[flagName];\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(\n            `Setting feature override from URL ${flagName}: ${flagValue}.`);\n      }\n      this.set(flagName, flagValue);\n    }\n  }\n\n  async getAsync(flagName: string): Promise<FlagValue> {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    this.flags[flagName] = await this.evaluateFlag(flagName);\n    return this.flags[flagName];\n  }\n\n  get(flagName: string): FlagValue {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    const flagValue = this.evaluateFlag(flagName);\n    if (isPromise(flagValue)) {\n      throw new Error(\n          `Flag ${flagName} cannot be synchronously evaluated. ` +\n          `Please use getAsync() instead.`);\n    }\n\n    this.flags[flagName] = flagValue;\n    return this.flags[flagName];\n  }\n\n  getNumber(flagName: string): number {\n    return this.get(flagName) as number;\n  }\n\n  getBool(flagName: string): boolean {\n    return this.get(flagName) as boolean;\n  }\n\n  getFlags(): Flags {\n    return this.flags;\n  }\n  // For backwards compatibility.\n  get features(): Flags {\n    return this.flags;\n  }\n\n  set(flagName: string, value: FlagValue): void {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot set flag ${flagName} as it has not been registered.`);\n    }\n    this.flags[flagName] = value;\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  }\n\n  private evaluateFlag(flagName: string): FlagValue|Promise<FlagValue> {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot evaluate flag '${flagName}': no evaluation function found.`);\n    }\n    return this.flagRegistry[flagName].evaluationFn();\n  }\n\n  setFlags(flags: Flags) {\n    this.flags = Object.assign({}, flags);\n  }\n\n  reset() {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  private populateURLFlags(): void {\n    if (typeof this.global === 'undefined' ||\n        typeof this.global.location === 'undefined' ||\n        typeof this.global.location.search === 'undefined') {\n      return;\n    }\n\n    const urlParams = this.getQueryParams(this.global.location.search);\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n      keyValues.forEach(keyValue => {\n        const [key, value] = keyValue.split(':') as [string, string];\n        this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  }\n}\n\nexport function getQueryParams(queryString: string): {[key: string]: string} {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\n\nfunction decodeParam(\n    params: {[key: string]: string}, name: string, value?: string) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\n\nfunction parseValue(flagName: string, value: string): FlagValue {\n  value = value.toLowerCase();\n  if (value === 'true' || value === 'false') {\n    return value === 'true';\n  } else if (`${+ value}` === value) {\n    return +value;\n  }\n  throw new Error(\n      `Could not parse value flag value ${value} for flag ${flagName}.`);\n}\n\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n  return ENV;\n}\n\nexport let ENV: Environment = null;\nexport function setEnvironmentGlobal(environment: Environment) {\n  ENV = environment;\n}\n"]},"metadata":{},"sourceType":"module"}
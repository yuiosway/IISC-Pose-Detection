{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, tidy, util } from '@tensorflow/tfjs-core';\nimport { getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName } from '../operations/executors/utils';\nimport { executeOp } from '../operations/operation_executor';\nimport { ExecutionContext } from './execution_context';\nimport { getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow } from './model_analysis';\nexport class GraphExecutor {\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(graph, parent) {\n    this.graph = graph;\n    this.parent = parent;\n    this.compiledMap = new Map();\n    this._weightMap = {};\n    this.SEPERATOR = ',';\n    this._functions = {};\n    this._functionExecutorMap = {};\n    this.intermediateTensors = {};\n    this.keepTensorForDebug = false;\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] = new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n  get weightIds() {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n  get functionExecutorMap() {\n    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;\n  }\n  get weightMap() {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n  set weightMap(weightMap) {\n    const weightIds = Object.keys(weightMap).map(key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n  /**\n   * Set `ResourceManager` shared by executors of a model.\n   * @param resourceManager: `ResourceManager` of the `GraphModel`.\n   */\n  set resourceManager(resourceManager) {\n    this._resourceManager = resourceManager;\n  }\n  get inputs() {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,\n        dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined\n      };\n    });\n  }\n  get outputs() {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,\n        dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined\n      };\n    });\n  }\n  get inputNodes() {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n  get outputNodes() {\n    return this._outputs.map(node => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? `${name}:${node.defaultOutput}` : name;\n    });\n  }\n  get functions() {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {});\n  }\n  getCompilationKey(inputs, outputs) {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' + sortedOutputs.join(this.SEPERATOR);\n  }\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  compile(inputs, outputs) {\n    const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const {\n      missingInputs,\n      dynamicNode,\n      syncInputs\n    } = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(`This execution contains the node '${dynamicNode.name}', which has ` + `the dynamic op '${dynamicNode.op}'. Please use ` + `model.executeAsync() instead. Alternatively, to avoid the ` + `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(`Cannot compute the outputs [${outNames}] from the provided inputs ` + `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n    return getNodesInTopologicalOrder(this.graph, this.weightMap, executionInfo);\n  }\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model, if\n   * no outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   */\n  execute(inputs, outputs) {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes = names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n    this.resetIntermediateTensors();\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n    const tensorArrayMap = {};\n    const tensorListMap = {};\n    return tidy(() => {\n      const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);\n      const tensorsMap = Object.assign({}, this.weightMap);\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors = executeOp(node, tensorsMap, context, this._resourceManager);\n          if (util.isPromise(tensors)) {\n            throw new Error(`The execution of the op '${node.op}' returned a promise. ` + `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(node.name, node, tensorsMap, context, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount);\n        }\n      }\n      // dispose the context for the root executor\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n  getFrozenTensorIds(tensorMap) {\n    const ids = [].concat.apply([], Object.keys(tensorMap).map(key => tensorMap[key]).map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] = (intermediateTensorConsumerCount[tensor.id] || 0) + node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors = getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensor.kept && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                if (!this.keepTensorForDebug) {\n                  tensor.dispose();\n                } else {\n                  const [nodeName, index] = getNodeNameAndIndex(node.name, context);\n                  if (this.intermediateTensors[nodeName]) {\n                    this.intermediateTensors[nodeName][index] = tensor;\n                  } else {\n                    this.intermediateTensors[nodeName] = [];\n                    this.intermediateTensors[nodeName][index] = tensor;\n                  }\n                }\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs, outputs) {\n    return this._executeAsync(inputs, outputs);\n  }\n  disposeIntermediateTensors() {\n    if (!this.intermediateTensors) {\n      return;\n    }\n    Object.keys(this.intermediateTensors).forEach(key => this.intermediateTensors[key].forEach(tensor => tensor.dispose()));\n    this.disposeTensorsMap();\n  }\n  disposeTensorsMap() {\n    if (!this.tensorsMap) {\n      return;\n    }\n    Object.keys(this.tensorsMap).forEach(key => {\n      const tensorArray = this.tensorsMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.kept && !tensor.isDisposed && !this.keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n    });\n  }\n  getIntermediateTensors() {\n    return this.tensorsMap;\n  }\n  resetIntermediateTensors() {\n    for (const key in this.intermediateTensors) {\n      this.intermediateTensors[key].forEach(tensor => tensor.dispose());\n      delete this.intermediateTensors[key];\n    }\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Optional. Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optinal global TensorList map by id. Used for\n   * function execution.\n   */\n  async _executeAsync(inputs, outputs) {\n    let isFunctionExecution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let tensorArrayMap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let tensorListMap = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    }\n    // For model debug.\n    try {\n      this.keepTensorForDebug = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n    } catch (e) {\n      console.warn(e.message);\n    }\n    this.resetIntermediateTensors();\n    const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    this.tensorsMap = await this.executeWithControlFlow(inputs, context, outputs, isFunctionExecution);\n    const results = outputs.map(name => getTensor(name, this.tensorsMap, context));\n    // dispose all the intermediate tensors\n    const outputIds = results.map(t => t.id);\n    const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n    this.keepIds = new Set([...outputIds, ...inputIds, ...this.weightIds]);\n    if (!this.keepTensorForDebug) {\n      this.disposeTensorsMap();\n    }\n    // dispose the context for the root executor\n    if (this.parent == null) {\n      context.dispose(this.keepIds);\n    }\n    return results;\n  }\n  async executeFunctionAsync(inputs, tensorArrayMap, tensorListMap) {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {});\n    return this._executeAsync(mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param outputNames Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n  async executeWithControlFlow(inputs, context, outputNames, isFunctionExecution) {\n    const names = Object.keys(inputs);\n    const inputNodes = names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n    const {\n      usedNodes,\n      missingInputs,\n      dynamicNode,\n      syncInputs\n    } = getExecutionSubgraph(inputs, outputNodes, this.weightMap, this._initNodes);\n    // First nodes to execute include inputNodes, weights, and initNodes.\n    const stack = [...inputNodes, ...this.graph.weights, ...(this._initNodes || [])].map(node => {\n      return {\n        node,\n        contexts: context.currentContext\n      };\n    });\n    const tensorsMap = Object.assign({}, this.weightMap);\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(`This model execution did not contain any nodes with control flow ` + `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs = outputNodes.filter(node => !isControlFlow(node) && !getTensor(node.name, tensorsMap, context)).map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg = `Alternatively, to avoid the dynamic ops, use model.execute() ` + `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(`Cannot compute the outputs [${missingOutputs}] from the provided ` + `inputs [${names}]. Consider providing the following inputs: ` + `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n  processStack(inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes) {\n    const promises = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' && getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n      // only process nodes that are not in the tensorMap yet, this include\n      // inputNodes and internal initNodes.\n      if (tensorMap[item.node.name] == null) {\n        const tensors = executeOp(item.node, tensorMap, context, this._resourceManager);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (util.isPromise(tensors)) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n  processChildNodes(node, stack, context, tensorMap, added, usedNodes) {\n    node.children.forEach(childNode => {\n      const [nodeName] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n          return !!getTensor(name, tensorMap, context);\n        })) {\n          added[nodeName] = true;\n          stack.push({\n            contexts: context.currentContext,\n            node: childNode\n          });\n        }\n      } else\n        // Otherwise all inputs must to have value.\n        if (childNode.inputNames.every(name => {\n          return !!getTensor(name, tensorMap, context);\n        })) {\n          added[nodeName] = true;\n          stack.push({\n            contexts: context.currentContext,\n            node: childNode\n          });\n        }\n    });\n  }\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap).forEach(key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n  checkInputShapeAndType(inputs) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value;\n        const match = shape.length === input.shape.length && input.shape.every((dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(match, () => `The shape of dict['${node.name}'] provided in ` + `model.execute(dict) must be [${shape}], but was ` + `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(input.dtype === node.attrParams['dtype'].value, () => `The dtype of dict['${node.name}'] provided in ` + `model.execute(dict) must be ` + `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n  mapInputs(inputs) {\n    const result = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null && this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n  checkInputs(inputs) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(`The dict provided in model.execute(dict) has ` + `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n  mapOutputs(outputs) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null && this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n  checkOutputs(outputs) {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["env","tidy","util","getNodeNameAndIndex","getParamValue","getTensor","getTensorsForCurrentContenxt","parseNodeName","executeOp","ExecutionContext","getExecutionSubgraph","getNodesInTopologicalOrder","isControlFlow","GraphExecutor","constructor","graph","parent","Map","_outputs","outputs","_inputs","inputs","_initNodes","initNodes","_signature","signature","_functions","functions","Object","keys","forEach","name","_functionExecutorMap","weightIds","_weightIds","functionExecutorMap","weightMap","_weightMap","map","key","tensor","id","concat","resourceManager","_resourceManager","node","shape","attrParams","value","undefined","dtype","inputNodes","signatureKey","outputNodes","defaultOutput","reduce","getCompilationKey","sortedInputs","sort","sortedOutputs","join","SEPERATOR","compile","executionInfo","missingInputs","dynamicNode","syncInputs","Error","op","length","outNames","n","inNames","execute","mapInputs","names","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","nodes","outputNodeNames","resetIntermediateTensors","compilationKey","orderedNodes","compiledMap","get","set","tensorArrayMap","tensorListMap","context","tensorsMap","nodeName","index","tensors","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","i","isPromise","checkTensorForDisposal","dispose","tensorMap","ids","apply","Set","outputNames","category","indexOf","children","input","kept","has","count","keepTensorForDebug","intermediateTensors","executeAsync","_executeAsync","disposeIntermediateTensors","disposeTensorsMap","tensorArray","isDisposed","keepIds","getIntermediateTensors","isFunctionExecution","getBool","e","console","warn","message","executeWithControlFlow","results","outputIds","t","inputIds","executeFunctionAsync","mappedInputs","usedNodes","stack","weights","contexts","currentContext","added","promises","processStack","Promise","all","missingOutputs","filter","alternativeMsg","item","pop","push","then","processChildNodes","childNode","inputNames","some","every","match","dim","assert","result","inputName","notInGraph","normalizedName"],"sources":["C:\\Users\\vivek\\OneDrive\\Desktop\\College\\z#5_Internships\\IISC\\tfjs-converter\\src\\executor\\graph_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo, TensorListMap} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\nimport {ResourceManager} from './resource_manager';\nimport {FunctionExecutor} from './types';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor implements FunctionExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private _weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private _initNodes: Node[];  // Internal init nodes to start initialization.\n  private SEPERATOR = ',';\n  private _functions: {[key: string]: Graph} = {};\n  private _functionExecutorMap: {[key: string]: FunctionExecutor} = {};\n  private _resourceManager: ResourceManager;\n  private intermediateTensors: NamedTensorsMap = {};\n  private keepIds: Set<number>;\n  private tensorsMap: NamedTensorsMap;\n  private keepTensorForDebug = false;\n\n  get weightIds(): number[] {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n\n  get functionExecutorMap(): {[key: string]: FunctionExecutor} {\n    return this.parent ? this.parent.functionExecutorMap :\n                         this._functionExecutorMap;\n  }\n\n  get weightMap(): NamedTensorsMap {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  /**\n   * Set `ResourceManager` shared by executors of a model.\n   * @param resourceManager: `ResourceManager` of the `GraphModel`.\n   */\n  set resourceManager(resourceManager: ResourceManager) {\n    this._resourceManager = resourceManager;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map((node) => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n    });\n  }\n\n  get functions(): {[key: string]: ISignatureDef} {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {} as {[key: string]: ISignatureDef});\n  }\n\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(private graph: Graph, private parent?: GraphExecutor) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] =\n            new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo =\n        getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model, if\n   * no outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   */\n  execute(inputs: NamedTensorMap, outputs?: string[]): Tensor[] {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n    this.resetIntermediateTensors();\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n\n    const tensorArrayMap: TensorArrayMap = {};\n    const tensorListMap: TensorListMap = {};\n\n    return tidy(() => {\n      const context = new ExecutionContext(\n          this.weightMap, tensorArrayMap, tensorListMap,\n          this.functionExecutorMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors =\n              executeOp(node, tensorsMap, context, this._resourceManager) as\n              Tensor[];\n          if (util.isPromise(tensors)) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep,\n              outputNodeNames, intermediateTensorConsumerCount);\n        }\n      }\n      // dispose the context for the root executor\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensor.kept && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                if (!this.keepTensorForDebug) {\n                  tensor.dispose();\n                } else {\n                  const [nodeName, index] =\n                      getNodeNameAndIndex(node.name, context);\n                  if (this.intermediateTensors[nodeName]) {\n                    this.intermediateTensors[nodeName][index] = tensor;\n                  } else {\n                    this.intermediateTensors[nodeName] = [];\n                    this.intermediateTensors[nodeName][index] = tensor;\n                  }\n                }\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs?: string[]):\n      Promise<Tensor[]> {\n    return this._executeAsync(inputs, outputs);\n  }\n\n  disposeIntermediateTensors() {\n    if (!this.intermediateTensors) {\n      return;\n    }\n    Object.keys(this.intermediateTensors)\n        .forEach(\n            key => this.intermediateTensors[key].forEach(\n                tensor => tensor.dispose()));\n    this.disposeTensorsMap();\n  }\n\n  private disposeTensorsMap() {\n    if (!this.tensorsMap) {\n      return;\n    }\n    Object.keys(this.tensorsMap).forEach(key => {\n      const tensorArray = this.tensorsMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.kept && !tensor.isDisposed &&\n            !this.keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n    });\n  }\n\n  getIntermediateTensors(): NamedTensorsMap {\n    return this.tensorsMap;\n  }\n\n  private resetIntermediateTensors() {\n    for (const key in this.intermediateTensors) {\n      this.intermediateTensors[key].forEach(tensor => tensor.dispose());\n      delete this.intermediateTensors[key];\n    }\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Optional. Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optinal global TensorList map by id. Used for\n   * function execution.\n   */\n  private async _executeAsync(\n      inputs: NamedTensorMap, outputs?: string[], isFunctionExecution = false,\n      tensorArrayMap: TensorArrayMap = {},\n      tensorListMap: TensorListMap = {}): Promise<Tensor[]> {\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    }\n\n    // For model debug.\n    try {\n      this.keepTensorForDebug = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n    } catch (e) {\n      console.warn(e.message);\n    }\n    this.resetIntermediateTensors();\n\n    const context = new ExecutionContext(\n        this.weightMap, tensorArrayMap, tensorListMap,\n        this.functionExecutorMap);\n\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    this.tensorsMap = await this.executeWithControlFlow(\n        inputs, context, outputs, isFunctionExecution);\n    const results =\n        outputs.map(name => getTensor(name, this.tensorsMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = results.map(t => t.id);\n    const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n    this.keepIds =\n        new Set<number>([...outputIds, ...inputIds, ...this.weightIds]);\n    if (!this.keepTensorForDebug) {\n      this.disposeTensorsMap();\n    }\n\n    // dispose the context for the root executor\n    if (this.parent == null) {\n      context.dispose(this.keepIds);\n    }\n\n    return results;\n  }\n\n  async executeFunctionAsync(\n      inputs: Tensor[], tensorArrayMap: TensorArrayMap,\n      tensorListMap: TensorListMap): Promise<Tensor[]> {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {} as NamedTensorMap);\n\n    return this._executeAsync(\n        mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param outputNames Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext, outputNames?: string[],\n      isFunctionExecution?: boolean): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(\n            inputs, outputNodes, this.weightMap, this._initNodes);\n\n    // First nodes to execute include inputNodes, weights, and initNodes.\n    const stack: NodeWithContexts[] = [\n      ...inputNodes, ...this.graph.weights, ...(this._initNodes || [])\n    ].map(node => {\n      return {node, contexts: context.currentContext};\n    });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not in the tensorMap yet, this include\n      // inputNodes and internal initNodes.\n      if (tensorMap[item.node.name] == null) {\n        const tensors =\n            executeOp(item.node, tensorMap, context, this._resourceManager);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (util.isPromise(tensors)) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null &&\n          this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null &&\n          this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
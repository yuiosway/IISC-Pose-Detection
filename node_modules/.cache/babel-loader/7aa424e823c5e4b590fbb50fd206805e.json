{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ScatterProgram {\n  constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape) {\n    let summingDupeIndex = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n    this.variableNames = ['updates', 'indices', 'defaultValue'];\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAiB,QAAO,mBAAmB;AAEnD,OAAM,MAAOC,cAAc;EAKzBC,YACIC,UAAkB,EAAEC,QAAgB,EAAEC,WAAmB,EACzDC,WAAmB,EAAEC,OAAiB,EAAEC,KAAe,EAChC;IAAA,IAAvBC,gBAAgB,uEAAG,IAAI;IAP3B,kBAAa,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,cAAc,CAAC;IAQpD,IAAI,CAACC,WAAW,GAAGF,KAAK;IACxB,MAAMG,WAAW,GAAGX,iBAAiB,CAACO,OAAO,CAACK,MAAM,CAAC;IACrD,MAAMC,KAAK,GAAGb,iBAAiB,CAACQ,KAAK,CAACI,MAAM,CAAC;IAC7C,IAAIE,aAAa,GAAG,EAAE;IACtB,IAAIT,WAAW,KAAK,CAAC,EAAE;MACrBS,aAAa,GAAG,GAAG;KACpB,MAAM,IAAIT,WAAW,KAAK,CAAC,EAAE;MAC5BS,aAAa,GAAG,MAAM;;IAExB,MAAMC,cAAc,GAAG,cAAcD,aAAa,GAAG;IAErD,IAAIE,aAAa,GAAG,EAAE;IACtB,IAAIV,WAAW,KAAK,CAAC,EAAE;MACrBU,aAAa,GAAG,GAAG;KACpB,MAAM,IAAIV,WAAW,KAAK,CAAC,EAAE;MAC5BU,aAAa,GAAG,cAAc;;IAEhC,MAAMC,cAAc,GAAG,cAAcD,aAAa,GAAG;IAErD,MAAME,YAAY,GAAGd,QAAQ,GAAG,CAAC,GAAG,YAAY,GAAG,SAAS;IAC5D,IAAI,CAACe,QAAQ,GAAG;UACVR,WAAW,cAAcA,WAAW,IAAIJ,OAAO;;;YAG7CM,KAAK;;;gCAGeV,UAAU;;kCAERC,QAAQ;kCACRW,cAAc;0CACNG,YAAY;;;uBAG/BD,cAAc;;;;;;OAM9B;EACL","names":["getCoordsDataType","ScatterProgram","constructor","updateSize","sliceDim","indicesRank","updatesRank","strides","shape","summingDupeIndex","outputShape","stridesType","length","dtype","indicesString","indicesSnippet","updatesString","updatesSnippet","strideString","userCode"],"sources":["C:\\Users\\vivek\\OneDrive\\Desktop\\College\\z#5_Internships\\IISC\\tfjs-backend-webgl\\src\\scatter_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}